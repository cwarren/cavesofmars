Screens:
- Caves of Mars title/splash screen
- story screen
- class selection screen
- play screen
    + maps: surface, upper caves, gateway boss cave, lower tunnels
- item selection screen
- falling animation screen

- 

Game Jam Goals:

- split messaging display into a separate screen than the main map/play area
  + implement message history system

- refactor fog of war to use a secondary map rather than the live map (i.e. avoid showing distant map changes)

- design and implement a richer melee combat system (at the least, split out hitting, damaging, other hit effects, dodging, damage resistance, and on-being-hit effects)

- integrate thrown/fired items into the combat system

- design and implement a simple loot system (or, rather, give appropriate items to appropriate NPCs, and have those items be used)

- design and implement a simple keyed-door system
  
- boss key gives you access to win state


standard starting gear:

JATT - Jack-of-All-Trades-Tool - shovel/pick/axe/staff/prybar
HEM Suit (badly damaged)- Hostile Environment Mitigation Suit
Multitool - [leatherman]
Comm Unit (broken)
HEM Pack (broken) - (heater, oxy tanks, etc.)
Headlamp
powerbars
analyzer


------------------------------------------

FULLY PROCEDURAL CONTENT

dynamically build random tables from components and random number (and constraints)
randomize seed rates, various drop rates, etc.
the project ends up being creating a roguelike engine that uses a metaprogramming language than can incorporate various kinds of randomness
    - meta-object/item/entity definitions
    - constraint systems for meta-foo


----------------------------
PROCESS TO ADD NEW SET OF FUNCTIONALITY

1. spec out idea in design notes
2. in bindings.js, add action(s)
3. in bindings.js, add bindings for the new action to all the binding sets
TEST: run game to make sure there are no code errors
4. in aux_screens.js, add help notes to appropriate section of Game.AuxScreen.helpScreen render
TEST: run game to make sure the help notes show up correctly
5. in screens.js, add UI hooks in handleInput of playScreen - put in code to show approp sub screen (though that screen might not exist yet)
6. in screens.js, add UI hooks in handleInput of any relevant subscreen (e.g. inventory screen) - put in code to show approp sub screen (though that screen might not exist yet)
7. put in minimal stubs (i.e. little to no functionality - just enough code that things won't crash when run) for the new sub screen(s)
    NOTE: put a console.log somewhere in there so you can verify that you've hit the target code segment
TEST: run game to make sure you can get to the new subscreens by using the approp key commands
8. implement the new functionality in the new subscreens

----------------------------


GAME DESIGN THOUGHTS

A key aspect of the game is improvement: of self, of equipment, and of environment.
    - self improvement : PRIMARY- leveling up; choices of which things to improve; consider exercises (deliberate focus), practicing (used actions/skills), and 1-off improvements
    - equipment improvement : PRIMARY- finding better stuff; add ways to improve existing stuff (crafting / modifying)
    - environment improvement : protection, recovery, storage, combat help (traps et al)
    

----------------------------


NOTE: a density function might be useful; consider even doing away with direct mass and instead deal with bulk and density...?

additional player skills / attributes available for improvement during leveling events:
    - gardening : improves good-growth rate of seeds
    - recovery : improves rate of healing
    - speed : improves (i.e. shortens) default action duration
        - split into movement speed and combat speed
    - food efficiency
    

TODO NEXT:

!! DEGUG: some issue with inven weight not being correctly handled when items unpacked from a container....?

1. add whip-spine to random tables for mob distribution

2. crafting : corpse breakdown stuff

2. crafting : more recipes

3. structures

4. crafting : structures

5. figure out garbage collection on objects / creatures
    - maybe need some kind of history of where the player has been lately
        + clear out rocks where the player is not
        + clear out spore-y masses where the player is not
        + clear out corpses where the player is not
    - chance of quiescent funcus spawn decreases with greater number of them
   ideally would have some kind of profiling tool to figure out where the slow-down is happening

8 when nothing is in hands, the char summary on the left should indicate that

10. for random tables, think about an associated things system (e.g. if this thing is chosen, then a chance to choose these others as well)
    - random tables hsould returns an array of chosen things
        + refactor existing first to return single-elt arrays and use cases to handle the returned arrays


15. add an html input box so tablets can do key-entry

20. make container access an ongoing action (so it can be interrupted part way through (otherwise a previously-out-of-sight entity can kill while the player is e.g. putting something in a sack))

25. useable items (potions, pods, etc.)

30. cooking - requires certain equipment and conditions; reduces bulk by factor of X, weight by X/2, increases food density by at least 1/X
    NOTE: this is essentially crafting

33. figure out how to mark tiles as non-spawnable and/or creature averting
33.5 add mechanism to allow player to do such marking
    via crafting, allow creation of:
        - doors (open, close, lock, break, etc.)
        - security things (e.g. creature deterrent - prevents spawning on/around a given area, creatures tend to wander away from it
   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   NOTE: this step allows the player to build a home base!!!  At this point it in many ways transforms into a sandbox game! Embrace this!!!
   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
NOTE: this is probably handled via Structures


35. add new entity: small martian (colored @? m? a (references @)? p? other char?)
35.1     design & build framework for a more volitional AI
35.3.    which can pick up and equip items it finds (5 inven slots? 5 L? 10kg?)
35.7     need a value metric function for things that can be found/gotten - should have option of spec-ing direct values for items, but the function should also support inspection-based valuation)
35.8.    give small martians some starting loot
35.9. martian drops inventory on death


36. martian needs to be able to spot and head to interesting items
    
38. create a flee behavior and add it to appropriate controllers?

44. add to container item mixin some utility functions for transferring the things from one container to another
    - two options for how to handle things that won't fit - a) leave them in the original container, b) drop them on the map

45. refactor packing and unpacking to use the above utility functions

58. mobs respond to ranged attacks by moving towards the source IF the source is in visual range and the mob is a melee attacker, away otherwise

65. allow some containers to add contents directly to action item lists
    NOTE: this will likely require a general re-structuring of the item list screen stuff

72.5 consider a spore-y mass repository w/ different kinds of spore-y masses that grow on different things (even consider making this prodecurally generated - can dynamically set targets, exclusions, rates, etc.)
72.75 consider docile fungi occasionally spawning nearby spore-y masses that share the same traits



90. design/implement alternate path to victory(ish) - post death, if killed at least one ooze and at least one fungus, or if killed by fungus, option to revive and play as a fungal zombie - food consumption increases dramatically, allied with fungus, no further equipping, but still can level/improve

100. add stackability to some items?
    - Stackable mixin? inherent to items? Latter is easier to handle (no checking for mixins)
        - perhaps store a function for isStackable (function defined in the item template)
    - OR, contemplate a soft-stack model, where adjacent items of the same type are shown as a single with a count while remaining independent under the hood
        - ... but probably not this; issues w/ space efficiency and general implementation w.r.t. inventory UI

    NOTE: how to handle stability in containers that have qty limits? need to add a getItemCount method to container mixin - it loops through _items and adds the qty for each
    NOTE: color-highlight the counts when showing an item list? there's getting to be a LOT of info on that screen....; figure out where to put the counts on that screen, and how to handl display of bulk / wt

        


    



