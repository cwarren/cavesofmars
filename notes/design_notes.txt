Screens:
- Caves of Mars title/splash screen
- story screen
- class selection screen
- play screen
    + maps: surface, upper caves, gateway boss cave, lower tunnels
- item selection screen
- falling animation screen

- 

Game Jam Goals:

- split messaging display into a separate screen than the main map/play area
  + implement message history system

- refactor fog of war to use a secondary map rather than the live map (i.e. avoid showing distant map changes)

- design and implement a richer melee combat system (at the least, split out hitting, damaging, other hit effects, dodging, damage resistance, and on-being-hit effects)

- integrate thrown/fired items into the combat system

- design and implement a simple loot system (or, rather, give appropriate items to appropriate NPCs, and have those items be used)

- design and implement a simple keyed-door system
  
- boss key gives you access to win state


standard starting gear:

JATT - Jack-of-All-Trades-Tool - shovel/pick/axe/staff/prybar
HEM Suit (badly damaged)- Hostile Environment Mitigation Suit
Multitool - [leatherman]
Comm Unit (broken)
HEM Pack (broken) - (heater, oxy tanks, etc.)
Headlamp
powerbars
analyzer


----------------------------
PROCESS TO ADD NEW SET OF FUNCTIONALITY

1. spec out idea in design notes
2. in bindings.js, add action(s)
3. in bindings.js, add bindings for the new action to all the binding sets
TEST: run game to make sure there are no code errors
4. in aux_screens.js, add help notes to appropriate section of Game.AuxScreen.helpScreen render
TEST: run game to make sure the help notes show up correctly
5. in screens.js, add UI hooks in handleInput of playScreen - put in code to show approp sub screen (though that screen might not exist yet)
6. in screens.js, add UI hooks in handleInput of any relevant subscreen (e.g. inventory screen) - put in code to show approp sub screen (though that screen might not exist yet)
7. put in minimal stubs (i.e. little to no functionality - just enough code that things won't crash when run) for the new sub screen(s)
    NOTE: put a console.log somewhere in there so you can verify that you've hit the target code segment
TEST: run game to make sure you can get to the new subscreens by using the approp key commands
8. implement the new functionality in the new subscreens

----------------------------


NOTE: a density function might be useful; consider even doing away with direct mass and instead deal with bulk and density...?

additional player skills / attributes available for improvement during leveling events:
    - gardening : improves good-growth rate of seeds
    - recovery : improves rate of healing
    - speed : improves (i.e. shortens) default action duration
        - split into movement speed and combat speed

TODO NEXT:

4. container objects

    - add an optional/alternative quantity limit for containers; quantity is an additional constraint before weight and bulk are checked

8. add stackability to some items
    - Stackable mixin? inherent to items? Latter is easier to handle (no checking for mixins)
        - perhaps store a function for isStackable (function defined in the item template)
    - OR, contemplate a soft-stack model, where adjacent items of the same type are shown as a single with a count while remaining independent under the hood
        - ... but probably not this; issues w/ space efficiency and general implementation w.r.t. inventory UI

10. add new entity: small martian
11.    which can pick up and equip items it finds (5 inven slots)
11.5      need a value metric function for things that can be found/gotten - should have option of spec-ing direct values for items, but the function shoudl also support inspection-based valuation)
12.    and which uses a more interesting / better wander mechanism (A* towards a given visible destination - choose a new destination on arrival, OR, weight random space selection against backtracking (until caught in a dead end?))
13.    and drop inventory on death

14. add to container item mixin some utility functions for transferring the things from one container to another
    - two options for how to handle things that won't fit - a) leave them in the original container, b) drop them on the map

14.5 refactor packing and unpacking to use the above utility functions

15. LOOT (loot tables (re-read blog post); drop rate; etc.)
        oozes sometimes drop loot
        give small martians some starting loot
        
17. figure out where geodic nuts and jelly balls come from (oozes, perhaps? introduce several kinds of ooze, and when they are adjacent they have a chance to spawn a jelly ball or a geodic nut (depending on other circumstances?))
    - when an ooze en

18. mobs respond to ranged attacks by moving towards the source IF the source is in visual range

19. item mixin for materialsSource: max sourced, min sourced, _materialsRemaining (random from min to max), possible materials loot table
    - figure out how this works with eating!


20. crafting system!
        two basic operations - break down (consume?) (create raw materials from something), and construct (build something from raw materials and/or other things)
    base:
        - material
            + leather (generally, creature parts)
            + suit scraps
            + dried mycelium (particular fungus, particular techniques?)
        - cord
            + sinew (generally, creature parts)
            + suit scraps
        - sticks, small
            + dried mycelium (particular fungus, particular techniques?)
            + bone (generally, creature parts)
            + JAT scraps
        - sticks, large
            + bone (generally, creature parts)
            + JAT scraps
        - rocks
        - adhesive
            + fungus stuff (particular fungus, particular techniques?)
            + creature-based
        - edges
            + stone shards (from worked stone)
            + suit scraps
            + teeth (generally, creature parts)
        - hard material
            + suit scraps
            + scutes (generally, creature parts)
            + worked stone (from rocks)
            + dried mycelium (particular fungus, particular techniques?)
    created:
        - various weapons & armor
        - ammo
        - loose walls (rubble tiles)
        - tight walls (cracked stone tiles)
        - containers
        - security things (e.g. creature deterrent - prevents spawning on/around a given area, creatures tend to wander away from it
        
    

25. useable items (potions, pods, etc.)

30. cooking - requires certain equipment and conditions; reduces bulk by factor of X, weight by X/2, increases food density by at least 1/X

35. allow some containers to add contents directly to action item lists
    NOTE: this will likely require a general re-structuring of the item list screen stuff

42.5 consider a spore-y mass repository w/ different kinds of spore-y masses that grow on different things (even consider making this prodecurally generated - can dynamically set targets, exclusions, rates, etc.)
42.75 consider docile fungi occasionally spawning nearby spore-y masses that share the same traits



70. design/implement alternate path to victory(ish) - post death, if killed at least one ooze and at least one fungus, or if killed by fungus, option to revive and play as a fungal zombie - food consumption increases dramatically, allied with fungus, no further equipping, but still can level/improve
