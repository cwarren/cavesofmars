Screens:
- Caves of Mars title/splash screen
- story screen
- class selection screen
- play screen
    + maps: surface, upper caves, gateway boss cave, lower tunnels
- item selection screen
- falling animation screen

- 

Game Jam Goals:

- split messaging display into a separate screen than the main map/play area
  + implement message history system

- refactor fog of war to use a secondary map rather than the live map (i.e. avoid showing distant map changes)

- design and implement a richer melee combat system (at the least, split out hitting, damaging, other hit effects, dodging, damage resistance, and on-being-hit effects)

- integrate thrown/fired items into the combat system

- design and implement a simple loot system (or, rather, give appropriate items to appropriate NPCs, and have those items be used)

- design and implement a simple keyed-door system
  
- boss key gives you access to win state


standard starting gear:

JATT - Jack-of-All-Trades-Tool - shovel/pick/axe/staff/prybar
HEM Suit (badly damaged)- Hostile Environment Mitigation Suit
Multitool - [leatherman]
Comm Unit (broken)
HEM Pack (broken) - (heater, oxy tanks, etc.)
Headlamp
powerbars
analyzer

TODO NEXT:

1. add an isWeapon flag to items - only weapons add combat modifiers when wielded; consider converting Wearable mixin to isArmor flag (are there any differences between the two? probably actually more flexible/powerful when using a flag....)

2. wielding inventory commands offers options from items on current space in addition to those in inventory (access using the dash/minus key (NOT the numpad one)?)
    -- OR: if hands are currently empty, scan through all the items to be picked up and put the one with the highest bulk directly as wielded (then pick up others per normal process)
    -- NOTE: add message re: empty hand option to alert than inven is too full to pick up an item
    
3 consider altering wield keybinding to 'h' for hands, and wear keybinding to 'b' for body

4. a density function would probably be useful; consider even doing away with direct mass and instead deal with bulk and density...?

5. for food items: first, alter the weight and bulk per uses/consumption; second, figure out some kind of nutritional density for various food items, and give it appropriate uses by setting per-consume amount and total number of consumptions to match target total food value

5.5. do away with explicit food uses entirely - have a nutritional density rating for the food (i.e. represent food amt / L ), and entities have an EatAmount which is measured in L, and each 'E'at of the food increases entity food level by EatAmount * nutri-density of the item, and reduces item L and wght appropriately
    - entity has eatAmount - how many L the entity eats per 'E'at action
    - item has nutritional density, which is food value per L
    - on 'E'at of an item - 
        if (item bulk > eatAmount) food value eaten = eatAmount * nutritional density; increase satiation by food value, and reduce item bulk by eatAmount
        else if (item bulk <= eatAmount) increase satiation by item bulk * nutritional density, then destroy item
    NOTE: this pattern may be able to be generalized from nutritional density to action-use-density; that might be a way to implement stacking... (or that may be a thing to try in a future game)

8. container objects
    - containers have a weight, bulk
    - containers have a bulk capacity
    - containers have an access action duration - it can take more (for packs, pouches, etc) or less (for slings, bandoliers, etc) time to take out items so that they can be used (wielded, thrown, etc.)
    - weight goes up as items are added to it, but bulk does NOT
    - items are placed in a container using the p (pack) control key (NOTE: this is a two-stage thing - first the target container must be selected)
    - items in a container are accessed using the P (unPack) control key (NOTE: this is a two-stage thing - first the target container must be selected)

10. add new entity: small martian
11.    which can pick up and equip items it finds (5 inven slots)
11.5      need a value metric function for things that can be found/gotten - should have option of spec-ing direct values for items, but the function shoudl also support inspection-based valuation)
12.    and which uses a more interesting / better wander mechanism (A* towards a given visible destination - choose a new destination on arrival, OR, weight random space selection against backtracking (until caught in a dead end?))
13.    and drop inventory on death

15. LOOT (loot tables (re-read blog post); drop rate; etc.)
        oozes sometimes drop loot
        give small martians some starting loot

17. figure out where geodic nuts and jelly balls come from (oozes, perhaps? introduce several kinds of ooze, and when they are adjacent they have a chance to spawn a jelly ball or a geodic nut (depending on other circumstances?))

18. fix item sorting minor issue where geodic nut sorts before everything else 

20. crafting system!
        two basic operations - break down (consume?) (create raw materials from something), and construct (build something from raw materials and/or other things)
    base:
        - material
            + leather (generally, creature parts)
            + suit scraps
            + dried mycelium (particular fungus, particular techniques?)
        - cord
            + sinew (generally, creature parts)
            + suit scraps
        - sticks, small
            + dried mycelium (particular fungus, particular techniques?)
            + bone (generally, creature parts)
            + JAT scraps
        - sticks, large
            + bone (generally, creature parts)
            + JAT scraps
        - rocks
        - adhesive
            + fungus stuff (particular fungus, particular techniques?)
            + creature-based
        - edges
            + stone shards (from worked stone)
            + suit scraps
            + teeth (generally, creature parts)
        - hard material
            + suit scraps
            + scutes (generally, creature parts)
            + worked stone (from rocks)
            + dried mycelium (particular fungus, particular techniques?)

25. useable items (potions, pods, etc.)


42.5 consider a spore-y mass repository w/ different kinds of spore-y masses that grow on different things (even consider making this prodecurally generated - can dynamically set targets, exclusions, rates, etc.)
42.75 consider docile fungi occasionally spawning nearby spore-y masses that share the same traits



70. design/implement alternate path to victory(ish) - post death, if killed at least one ooze and at least one fungus, or if killed by fungus, option to revive and play as a fungal zombie - food consumption increases dramatically, allied with fungus, no further equipping, but still can level/improve
